# ----------------------------------------------------
# This file is generated by the Qt Visual Studio Tools.
# ------------------------------------------------------
# See: https://www.toptal.com/qt/vital-guide-qmake
# NOTE: Debug build should use /MDd runtime library, and release should use /MD (may be default for Qt)

message("Beginning qmake build of grand_blue.pro")

TEMPLATE = app
TARGET = grand_blue
QT += core \
      opengl \ 
	  gui \
	  widgets \
	  concurrent \ # Mutexes/multithreading
	  openglextensions \
	  multimedia \
	  gamepad \ # Controller support
	  network # TCP/IP

# Set compiler flags /////////////////////////////////////////////////////////////
QMAKE_CXXFLAGS += /MP # Multiprocess compile, much faster

# Set general configuration options /////////////////////////////////////////////////
CONFIG += c++latest # Add support for c++17.
CONFIG += qt thread # console 
CONFIG += debug_and_release # Creates additional debug and release folders, but need it for debug

CONFIG(debug, debug|release){
    DESTDIR = ../app/debug
	DEFINES += DEBUG_MODE
} else {
    DESTDIR = ../app/release
}

# Do not display debug output in release mode
CONFIG(debug, debug|release) : CONFIG += debug_info
CONFIG(release, debug|release) : DEFINES += QT_NO_DEBUG_OUTPUT

CONFIG += no_lflags_merge # Ensures that the list of libraries stored in the LIBS variable is not reduced to a list of unique values before it is used.
# CONFIG += CONSOLE # makes this a console application
CONFIG -= flat # flattens file hierarchy, subtract if this is not desired

# Defines //////////////////////////////////////////////////////////////////////////
DEFINES += _UNICODE _ENABLE_EXTENDED_ALIGNED_STORAGE WIN64 QT_DLL QT_OPENGL_LIB QT_OPENGLEXTENSIONS_LIB QT_WIDGETS_LIB
DEFINES += DEVELOP_MODE
DEFINES += PYTHONQT_STATIC_LIB
DEFINES += LINALG_USE_EIGEN
INCLUDEPATH += ./qt_generated \
    . \
    ./qt_generated/$(ConfigurationName) 
	
LIBS += -lopengl32 \
    -lglu32 
DEPENDPATH += .


# Add Libraries ////////////////////////////////////////////////////////////////////
# Include PythonQt and required libraries
LIBS += -L$$(PYTHON_LIB)/ -lpython$$(PYTHON_VERSION) # L"PATH" adds PATH to library search directory list, and -lName loads library Name during linking

include ( ../third_party/PythonQt/build/common.prf )  
include ( ../third_party/PythonQt/build/PythonQt.prf )  
#include ( ../third_party/PythonQt/build/PythonQt_QtAll.prf )  

# Eigen
INCLUDEPATH += $$PWD/src/third_party/eigen \
			   $$PWD/src/third_party/eigen/Eigen

# ASSIMP
# To be able to write <module.h>
INCLUDEPATH += ../third_party/assimp/assimp-5.0.0/include
INCLUDEPATH += ../third_party/assimp/assimp-5.0.0/build/include
CONFIG(debug, debug|release) : LIBS += -L$$PWD/lib/assimp -lassimp_d
CONFIG(release, debug|release) : LIBS += -L$$PWD/lib/assimp -lassimp

# PhysX
DEFINES += PX_PHYSX_STATIC_LIB
INCLUDEPATH += ../../PhysX/physx/include \
			   ../../PhysX/pxshared/include
CONFIG(debug, debug|release) { 
	LIBS += -L$$PWD/lib/physx/debug -lPhysX_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXCharacterKinematic_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXCommon_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXCooking_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXExtensions_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXFoundation_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXPvdSDK_static_32
	LIBS += -L$$PWD/lib/physx/debug -lPhysXVehicle_static_32
}
CONFIG(release, debug|release) { 
	# Always needed
	LIBS += -L$$PWD/lib/physx/release -lPhysXCommon_static_32
	
	# Always needed
	LIBS += -L$$PWD/lib/physx/release -lPhysX_static_32
	
	# Always needed
	LIBS += -L$$PWD/lib/physx/release -lPhysXFoundation_static_32
	
	# To cook geometry data on the fly
	LIBS += -L$$PWD/lib/physx/release -lPhysXCooking_static_32
	
	# Other
	LIBS += -L$$PWD/lib/physx/release -lPhysXCharacterKinematic_static_32
	LIBS += -L$$PWD/lib/physx/release -lPhysXExtensions_static_32
	LIBS += -L$$PWD/lib/physx/release -lPhysXPvdSDK_static_32
	LIBS += -L$$PWD/lib/physx/release -lPhysXVehicle_static_32
}

# FreeType
INCLUDEPATH +=  ../third_party/freetype-2.10.1/include
CONFIG(debug, debug|release) : LIBS += -L$$PWD/lib/freetype/debug -lfreetype
CONFIG(release, debug|release) : LIBS += -L$$PWD/lib/freetype/release -lfreetype
		

# Include Visual Leak Detector //////////////////////////////////////////////////////////////////
INCLUDEPATH += "../third_party/Visual Leak Detector/include/"
LIBS        += -L"../third_party/Visual Leak Detector/lib/Win32"	
	
			   
# Set directories //////////////////////////////////////////////////////////////////
MOC_DIR += ./qt_generated/moc
OBJECTS_DIR += ./qt_generated/obj
UI_DIR += ./qt_generated/ui
RCC_DIR += ./qt_generated

message("Loaded .pro files, now loading .pri")

# Load in library files for project
include(grand_blue.pri)

message("Loaded .pri files")