#include "GbDictionary.h"
#include "../readers/GbJsonReader.h"

namespace Gb {

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
// Dictionary
/////////////////////////////////////////////////////////////////////////////////////////////
Dictionary::Dictionary(const QJsonValue & json)
{
    loadFromJson(json);
}
/////////////////////////////////////////////////////////////////////////////////////////////
const GVariant & Dictionary::at(const QString & name) const
{
    if (m_attributes.find(name) == m_attributes.end()) {
        return s_invalidVariant;
    }
    return m_attributes.at(name);
}
/////////////////////////////////////////////////////////////////////////////////////////////
GVariant & Dictionary::operator[](const QString & key)
{
    return m_attributes[key];
}
/////////////////////////////////////////////////////////////////////////////////////////////
const GVariant & Dictionary::operator[](const QString & key) const
{
    return at(key);
}
/////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue Dictionary::asJson() const
{
    QVariantMap map = GVariant::toQVariantMap(m_attributes);
    QJsonObject object = QJsonObject::fromVariantMap(map);
    return object;
}
/////////////////////////////////////////////////////////////////////////////////////////////
void Dictionary::loadFromJson(const QJsonValue & json)
{
    QString jsonStr = JsonReader::ToQString(json);
    QVariantMap map = json.toObject().toVariantMap();
    m_attributes = GVariant::toGVariantMap(map);
}
/////////////////////////////////////////////////////////////////////////////////////////////
GVariant Dictionary::s_invalidVariant = GVariant();


/////////////////////////////////////////////////////////////////////////////////////////////
} // End namespaces
