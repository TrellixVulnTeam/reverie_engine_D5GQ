///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GbLoadable.h"

// Standard Includes

// External

// Project

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Gb {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Implementations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SerializationContext SerializationContext::s_emptyContext = SerializationContext();


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Serializable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GString Serializable::ToString(const QJsonObject & obj, QJsonDocument::JsonFormat fmt)
{
    return GString(ToByteData(obj, fmt).toStdString().c_str());
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QByteArray Serializable::ToByteData(const QJsonObject & obj, QJsonDocument::JsonFormat fmt)
{
    return QJsonDocument(obj).toJson(fmt);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QJsonObject Serializable::ObjectFromString(const GString & str)
{
    QByteArray json(str.c_str(), str.length());
    QJsonDocument doc = QJsonDocument::fromJson(json);
    return doc.object();
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Loadable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue Loadable::asJson() const
{
    QJsonObject jsonObject;
    jsonObject.insert("filePath", m_path.c_str());
    return jsonObject;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Loadable::loadFromJson(const QJsonValue & json, const SerializationContext & context)
{
    Q_UNUSED(context);
    m_path = GString(json.toObject().value("filePath").toString());
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DistributedLoadable
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DistributedLoadable::loadFromJson(const QJsonValue & json, const SerializationContext & context)
{
    Q_UNUSED(context);

    Loadable::loadFromJson(json);
    QJsonObject object = json.toObject();

    if (object.contains("additionalPaths")) {
        QJsonArray paths = object["additionalPaths"].toArray();
        for (const auto& pathJson : paths) {
            m_additionalPaths.push_back(GString(pathJson.toString()));
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // end namespacing
