#include "GbSortingLayer.h"

namespace Gb {

/////////////////////////////////////////////////////////////////////////////////////////////
// Class Definitions
/////////////////////////////////////////////////////////////////////////////////////////////
SortingLayer::SortingLayer() :
    Object(DEFAULT_SORTING_LAYER)
{
    setOrder(m_order);
}
/////////////////////////////////////////////////////////////////////////////////////////////
SortingLayer::SortingLayer(const QJsonValue & json)
{
    loadFromJson(json);
}
/////////////////////////////////////////////////////////////////////////////////////////////
SortingLayer::SortingLayer(const GString & name, int order) :
    Object(name) {
    setOrder(order);
}
/////////////////////////////////////////////////////////////////////////////////////////////
void SortingLayer::setOrder(int order)
{
    m_order = order;
    s_minimumOrder = std::min(order, s_minimumOrder);
}
/////////////////////////////////////////////////////////////////////////////////////////////
size_t SortingLayer::getPositiveOrder() const
{
    int order = m_order - s_minimumOrder;
    return size_t(order);
}
/////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue SortingLayer::asJson() const
{
    QJsonObject object;
    object.insert("order", m_order);
    object.insert("label", m_name.c_str());
    return object;
}
/////////////////////////////////////////////////////////////////////////////////////////////
void SortingLayer::loadFromJson(const QJsonValue& json, const SerializationContext& context)
{
    Q_UNUSED(context);

    const QJsonObject& object = json.toObject();
    setOrder(object.value("order").toInt());
    m_name = object.value("label").toString();
}
/////////////////////////////////////////////////////////////////////////////////////////////
int SortingLayer::s_minimumOrder = std::numeric_limits<int>::max();



/////////////////////////////////////////////////////////////////////////////////////////////
// End namespaces
}