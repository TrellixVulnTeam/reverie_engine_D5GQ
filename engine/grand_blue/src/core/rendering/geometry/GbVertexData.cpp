///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GbVertexData.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Gb {
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
quint64 VertexAttributes::getSizeInBytes() const
{
    quint64 len = 0;
    len += m_vertices.size() * sizeof(Vector3g);
    len += m_normals.size() * sizeof(Vector3g);
    len += m_texCoords.size() * sizeof(Vector3g);
    len += m_colors.size() * sizeof(Vector3g);
    len += m_miscInt.size() * sizeof(uint);
    len += m_miscReal.size() * sizeof(Vector4g);

    return len;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool VertexAttributes::empty() const {
    return m_vertices.empty();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void VertexAttributes::clear()
{
    m_vertices.clear();
    m_normals.clear();
    m_texCoords.clear();
    m_colors.clear();
    m_tangents.clear();
    m_miscInt.clear();
    m_miscReal.clear();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End namespaces
}