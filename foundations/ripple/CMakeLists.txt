# CMake build for all common application code
# To run cmake, add cmake/bin directory to system path
## TODO:
## Implement source_group, for organizing in IDE, see: https://stackoverflow.com/questions/31966135/cmake-source-group-not-working-correctly-with-hierarchical-project-setup

message( STATUS "\n\n*********************** Beginning sub-cmake build of Ripple ***********************")

# Project-level setup ====================================================
set(TARGET_NAME "ripple")

message (STATUS "--------- Set target ${TARGET_NAME}---------")

include(common_functions)

check_architecture()
set_cpp_version() # Set to C++ 17
set_compiler_options()
setup_python()

######## Auto-generate code
# See: https://stackoverflow.com/questions/26193068/how-to-only-build-auto-generated-code-when-the-generator-or-input-changes-in-cma
# See: https://cmake.org/cmake/help/latest/guide/tutorial/Adding%20a%20Custom%20Command%20and%20Generated%20File.html
# See: https://stackoverflow.com/questions/15972898/cmake-how-to-run-a-add-custom-command-before-everything-else

# Set path for auto-generation output
set(RIPPLE_AUTOGEN_PATH ${AUTOGEN_ROOT_PATH}/${TARGET_NAME})

# Ensure that cmake regenerates whenever the YAML describing schema version is changed
#See: https://stackoverflow.com/questions/4222326/cmake-compiling-generated-files
set(AUTOGEN_SCHEMA_YAML ${KINDLER_PATH}/autogen/data/g_schema_version.yaml)
set_directory_properties(PROPERTIES CMAKE_CONFIGURE_DEPENDS ${AUTOGEN_SCHEMA_YAML})

# Create command to auto-generate code at configure time, rather than build time like add_custom_command
# See: https://cliutils.gitlab.io/modern-cmake/chapters/basics/programs.html
# See: https://stackoverflow.com/questions/4222326/cmake-compiling-generated-files
set(RIPPLE_AUTOGEN_LIST_FILE ${RIPPLE_AUTOGEN_PATH}/file_list.txt)
set(RIPPLE_RUN_COMMAND "${KINDLER_PATH}/run_autogen.bat")
set(RIPPLE_RUN_ARGS "${ARCH_NAME} ${PYTHON_VERSION} ${TARGET_NAME} ${RIPPLE_AUTOGEN_PATH}")
message (STATUS "Running command: ${RIPPLE_RUN_COMMAND} ${RIPPLE_RUN_ARGS}")
execute_process(COMMAND ${RIPPLE_RUN_COMMAND} ${ARCH_NAME} ${PYTHON_VERSION} ${TARGET_NAME} ${RIPPLE_AUTOGEN_PATH}
                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
					# OUTPUT_FILE ${RIPPLE_AUTOGEN_PATH}/cmake/output.txt
					# ERROR_FILE ${RIPPLE_AUTOGEN_PATH}/cmake/error.txt
					OUTPUT_VARIABLE RIPPLE_OUTPUT_MESSAGE
					ERROR_VARIABLE RIPPLE_ERROR_MESSAGE
                    RESULT_VARIABLE RIPPLE_AUTOGEN_RESULTS
					ECHO_OUTPUT_VARIABLE
					ECHO_ERROR_VARIABLE
					# COMMAND_ERROR_IS_FATAL ANY
					)
if(RIPPLE_AUTOGEN_RESULTS AND NOT RIPPLE_AUTOGEN_RESULTS EQUAL 0)
  message(STATUS "FAILED: ${RIPPLE_AUTOGEN_RESULTS}\n ${RIPPLE_OUTPUT_MESSAGE} \n${RIPPLE_ERROR_MESSAGE}")
else()
  message(STATUS "SUCCESSFULLY RAN RIPPLE AUTOGEN")
endif()
message (STATUS "-------- Auto-generated ripple files at ${RIPPLE_AUTOGEN_LIST_FILE} ---------")

# Read auto-generated sources into a variable
file(READ ${RIPPLE_AUTOGEN_LIST_FILE} RIPPLE_AUTOGENERATED_SOURCES)
set(RIPPLE_AUTOGENERATED_SOURCES ${RIPPLE_AUTOGENERATED_SOURCES} CACHE INTERNAL "")

message (STATUS "-------- Auto-generated files are: ${RIPPLE_AUTOGENERATED_SOURCES} ---------")

######## Build library
# Get non-autogenerated sources
file(GLOB_RECURSE MY_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} 
     "src/*.c" "src/*.cpp" "include/*.c"  "include/*.h" "include/*.hpp")

# Add an library to be built from sources variable
add_library(${TARGET_NAME} STATIC ${MY_SOURCES} ${RIPPLE_AUTOGENERATED_SOURCES})

add_definitions(-D_UNICODE -D_ENABLE_EXTENDED_ALIGNED_STORAGE -DWIN64)
add_definitions(-DDEVELOP_MODE)
add_definitions(-DLINALG_USE_EIGEN) # For Eigen

# Disable warnings about deprecated things, like using strcpy (sorry, not sorry)
if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

#### Command-line configuration 
set_target_properties(${TARGET_NAME} PROPERTIES VS_DEBUGGER_COMMAND_ARGUMENTS "${CMAKE_CURRENT_SOURCE_DIR}")

########### Iterate over all targets to link libraries #################
include(add_common_libraries)

#### Add additional include directories for including using src as root 
# Public so that applications have access
# Auto-generated code
target_include_directories(${TARGET_NAME} PUBLIC "${RIPPLE_AUTOGEN_PATH}/include")

# Non-autogenerated code
target_include_directories(${TARGET_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")

#### Add compile definitions to the target 
set(DEBUG_DEFINITIONS "DEBUG_MODE")
set(RELEASE_DEFINITIONS "")
target_compile_definitions(${TARGET_NAME} PUBLIC
    $<$<CONFIG:DEBUG>:${DEBUG_DEFINITIONS}>
    $<$<CONFIG:RELEASE>:${RELEASE_DEFINITIONS}>
)

######## Link required libraries

# Layline
target_link_libraries(${TARGET_NAME} 
    PUBLIC 
    layline
    enums
    scribe
)


######## Add tests subproject
add_subdirectory(tests)