#include "GThreadedProcess.h"
#include "GProcessManager.h"
#include "../GCoreEngine.h"

namespace rev {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
ThreadedProcess::ThreadedProcess(CoreEngine * engine, ProcessManager* manager):
    Process(engine, manager)
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
ThreadedProcess::~ThreadedProcess()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ThreadedProcess::onUpdate(unsigned long deltaMs)
{
    Q_UNUSED(deltaMs)
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ThreadedProcess::onSuccess()
{
    // Emit signal to delete the process
    emit m_processManager->deleteThreadedProcess(getUuid());
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ThreadedProcess::run()
{
    runProcess(m_processManager->getDeltaMs());
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // End namespaces