/////////////////////////////////////////////////////////////////////////////////////////////
// Includes
/////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GB_LOG_EVENT_H
#define GB_LOG_EVENT_H

// Qt
#include <QString>

// Internal
#include "GEvent.h"
#include "../GLogger.h"
#include "../containers/GString.h"

namespace rev {
/////////////////////////////////////////////////////////////////////////////////////////////
// Forward Declarations
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
// Class definitions
/////////////////////////////////////////////////////////////////////////////////////////////

class LogEvent : public Event<kLogEvent> {
public:
    LogEvent(const GString& namespaceName,
        const GString& logMessage,
        const GString& threadId,
        LogLevel messageLevel = LogLevel::Info);
    ~LogEvent();

    const LogLevel& getLogLevel() const { return m_logLevel; }
    const GString& getNamespaceName() const { return m_namespaceName; }
    const GString& getLogMessage() const { return m_logMessage; }

protected:

    LogLevel m_logLevel;

    GString m_namespaceName;
    GString m_logMessage;
};

/////////////////////////////////////////////////////////////////////////////////////////////
} // End namespaces

#endif