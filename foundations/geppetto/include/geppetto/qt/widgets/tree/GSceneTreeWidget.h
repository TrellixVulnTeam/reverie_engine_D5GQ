#pragma once

// Qt
#include <QAction>
#include <QTreeWidget>
#include <QTreeWidgetItem>

// Project
#include "fortress/layer/framework/GSignalSlot.h"
#include "fortress/string/GString.h"
#include "fortress/encoding/uuid/GUuid.h"
#include "geppetto/qt/widgets/tree/GTreeWidget.h"

namespace rev {

class WidgetManager;
class SceneRelatedItem;
class SceneTreeWidget;

/// @class SceneRelatedItem
class SceneRelatedItem : public TreeItem {
public:
    /// @name Constructors and Destructors
    /// @{

    enum SceneType {
        kScenario = 1000,
        kScene,
        kSceneObject
    };

    /// @}

    /// @name Constructors and Destructors
    /// @{

    /// @brief Constructor
    /// @param[in] type denote whether is a scenario, scene, or scene object
    /// @param[in] j JSON representing the object represented by this item
    /// @param[in] id the ID of the object represented by this item. Unused for scenario
    SceneRelatedItem(SceneType type, const json& j, Uint32_t id = 0);

    /// @}

    /// @name Public Methods
    /// @{

    /// @brief Whether or not a scene object item's scene object is script-generated
    bool isAutoGenerated() const;

    /// @brief My own mime data method for convenience
    QVariant mimeData(int role) const;

    /// @brief Handle reparenting under a new item
    void reparent(SceneRelatedItem* newParent, int index = -1);

    /// @brief Perform an action from this item
    void performAction(UndoCommand* command);

    /// @brief Set the widget for this item in the given tree widget
    /// @note This is only called on the double click event
    virtual void setWidget() override;

    /// @brief Get the scene-related type of this tree item
    SceneType sceneType() const { return SceneType(type()); }

    /// @brief Convenience method for retrieving casted tree widget
    SceneTreeWidget* sceneTreeWidget() const;

    /// @brief Set the text on this item from the data
    void refreshText();

    /// @}

protected:
    /// @name Friends
    /// @{

    friend class SceneTreeWidget;
    friend class ChangeNameCommand;

    /// @}


    /// @name Protected Methods
    /// @{

    /// @brief Initialize the scene tree item
    virtual void initializeItem() override;

    /// @}
};


/// @class SceenTreeWidget
/// @todo Replace with a view
class SceneTreeWidget : public TreeWidget {
    Q_OBJECT
public:

    /// @name Constructors and Destructors
    /// @{
    SceneTreeWidget(WidgetManager* widgetManager, ActionManager* actionManager, const QString& name, QWidget* parent = nullptr);
    ~SceneTreeWidget();
    /// @}

    /// @name Public Methods
    /// @{

    /// @brief Get current scene 
    Int32_t getCurrentSceneId();

    /// @brief Get current scene object
    Int32_t getCurrentSceneObjectId();

    /// @brief Get the scenario tree item
    SceneRelatedItem* scenarioTreeItem() const;

    /// @brief Set the scenario tree item
    void setScenarioTreeItem(const json& scenarioJson);

    /// @brief Clear the header item
    void removeScenarioTreeItem();

    /// @brief Add/remove a scene tree item
    void addSceneTreeItem(const json& j, int index = -1);
    void addSceneObjectTreeItem(const json& j, Int32_t parentId = -1, int index = -1);

    void removeSceneTreeItem(SceneRelatedItem::SceneType type, const GString& name);
    void removeSceneObjectTreeItem(SceneRelatedItem::SceneType type, Int32_t id = -1);

    /// @brief Get tree item corresponding to the given object
    SceneRelatedItem* getItem(SceneRelatedItem::SceneType type, const GString& name);
    SceneRelatedItem* getSceneObjectItem(Int32_t id);

    /// @brief Clear selected objects
    void clearSelectedItems();

    /// @}

    Signal<const GString&> m_selectedSceneSignal; ///< Signal for selecting a scene
    Signal<Uint32_t> m_selectedSceneObjectSignal; ///< Signal to emit on selection of a scene object, with the ID of the object
    Signal<> m_deselectedSceneObjectSignal; ///< Signal to emit on deselection of any scene objects
    Signal<> m_deselectedSceneSignal;  ///< Signal to emit on deselection of any scenes

protected slots:
    /// @name Protected Slots
    /// @{

    /// @brief What to do on item double click
    virtual void onItemDoubleClicked(QTreeWidgetItem *item, int column) override;

    /// @brief What to do on item clicked
    virtual void onItemClicked(QTreeWidgetItem *item, int column) override;

    /// @brief What to do on item expanded
    virtual void onItemExpanded(QTreeWidgetItem* item) override;

    /// @brief What to do on current item change
    //void onCurrentItemChanged(QTreeWidgetItem *item, QTreeWidgetItem *previous);

    /// @}
protected:
    /// @name Friends
    /// @{

    friend class SceneRelatedItem;

    /// @}

    /// @name Protected Methods
    /// @{

    virtual QMimeData* mimeData(const QList<QTreeWidgetItem *> items) const override;
    virtual QStringList mimeTypes() const override;

    /// @brief initialize an item added to the widget
    virtual void initializeItem(QTreeWidgetItem* item);

    virtual void onDropOn(QDropEvent* event, QTreeWidgetItem* source, QTreeWidgetItem* destination) override;
    virtual void onDropBelow(QDropEvent* event, QTreeWidgetItem* source, QTreeWidgetItem* destination) override;
    virtual void onDropAbove(QDropEvent* event, QTreeWidgetItem* source, QTreeWidgetItem* destination) override;
    virtual void onDropViewport(QDropEvent* event, QTreeWidgetItem* source) override;
    virtual void onDropFromOtherWidget(QDropEvent* event, QTreeWidgetItem* source, QWidget* otherWidget);

    virtual bool dropMimeData(QTreeWidgetItem *parent, int index, const QMimeData *data, Qt::DropAction action);

    /// @brief Remove an item
    void removeItem(SceneRelatedItem* sceneItem);

    /// @brief Initialize the tree widget
    virtual void initializeWidget();

#ifndef QT_NO_CONTEXTMENU
    /// @brief Generates a context menu, overriding default implementation
    /// @note Context menus can be executed either asynchronously using the popup() function or 
    ///       synchronously using the exec() function
    virtual void contextMenuEvent(QContextMenuEvent *event) override;
#endif // QT_NO_CONTEXTMENU


    /// @}

    /// @name Protected Members
    /// @{

    /// @brief Actions performable in this widget
    QAction* m_addScenario{ nullptr };
    QAction* m_addSceneObject{ nullptr };
    QAction* m_copySceneObject{ nullptr };
    QAction* m_removeSceneObject{ nullptr };

    /// @brief The scene item clicked by a right-mouse operation
    SceneRelatedItem* m_currentSceneItem{ nullptr };
    SceneRelatedItem* m_currentSceneObjectItem{ nullptr };
    SceneRelatedItem* m_lastLeftClickedItem{ nullptr };

    /// @}
};


} // End namespace rev
