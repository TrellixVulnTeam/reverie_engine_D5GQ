#ifndef GB_FLAGS_H
#define GB_FLAGS_H

/////////////////////////////////////////////////////////////////////////////////////////////
// Includes
/////////////////////////////////////////////////////////////////////////////////////////////
#include <QFlags>

namespace Gb {

/////////////////////////////////////////////////////////////////////////////////////////////
// Forward Declarations
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
// Class definitions
/////////////////////////////////////////////////////////////////////////////////////////////

class Flags {
public:

    /// @brief Convert an integer to a QFlags object of the specified enum type
    template<typename FlagType, typename IntType>
    static QFlags<FlagType> toFlags(IntType integer) {
        QFlags<FlagType> flags;
        uint32_t unsignedInt = (uint32_t)integer;
        int count = 0;
        while (unsignedInt != 0) {
            // Get least-significant byte and set in QFlag
            bool lsb = unsignedInt & 1;
            uint32_t currVal = 1 << count;
            flags.setFlag(FlagType(currVal), lsb);

            // Shift over yet another time
            unsignedInt = unsignedInt >> 1;
            count++;
        }

        return flags;
    }
};


/////////////////////////////////////////////////////////////////////////////////////////////
} // End namespaces

#endif