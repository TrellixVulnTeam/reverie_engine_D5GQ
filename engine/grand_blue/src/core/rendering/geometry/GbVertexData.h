// See:
// https://www.trentreed.net/blog/qt5-opengl-part-1-basic-rendering/

#ifndef GB_VERTEX_DATA_H
#define GB_VERTEX_DATA_H

/////////////////////////////////////////////////////////////////////////////////////////////
// Includes
/////////////////////////////////////////////////////////////////////////////////////////////
// QT
#include "../GbGLFunctions.h"

// Internal
#include "../../GbObject.h"
#include "../../geometry/GbVector.h"
/////////////////////////////////////////////////////////////////////////////////////////////
// Macros
/////////////////////////////////////////////////////////////////////////////////////////////
#ifdef GB_USE_DOUBLE
typedef double real_g;
#else
typedef float real_g;
#endif

namespace Gb {

/////////////////////////////////////////////////////////////////////////////////////////////
// Forward declarations
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
// Constants
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
// Class Definitions
/////////////////////////////////////////////////////////////////////////////////////////////

/// @struct VertexAttributes
/// @brief Struct holding vertex attributes
struct VertexAttributes {
    /// @brief Vertex attribute data
    std::vector<Vector3g> m_vertices;    // 'v'(xyz)
    std::vector<Vector3g> m_normals;     // 'vn'
    std::vector<Vector2g> m_texCoords;   // 'vt'(uv)
    std::vector<Vector4g> m_colors;      // extension: vertex colors
    std::vector<Vector3g> m_tangents;    // tangents for normal mapping

    // Skeletal animation
    std::vector<Vector4i> m_miscInt; // used for IDs of the bones corresponding to the bone weights
    std::vector<Vector4g> m_miscReal; // used for bone weights for skeletal animation

    quint64 getSizeInBytes() const;

    bool empty() const;

    void clear();
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End namespaces
}

#endif
