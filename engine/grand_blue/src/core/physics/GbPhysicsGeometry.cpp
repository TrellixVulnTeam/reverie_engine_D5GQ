#include "GbPhysicsGeometry.h"

#include "GbPhysicsManager.h"
#include "../scene/GbScene.h"

namespace Gb {

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
// Physics Geometry
//////////////////////////////////////////////////////////////////////////////////////////////////
std::shared_ptr<PhysicsGeometry> PhysicsGeometry::createGeometry(const QJsonObject & json)
{
    GeometryType type = GeometryType(json.value("type").toInt());
    //QString name = json.value("name").toString();
    std::shared_ptr<PhysicsGeometry> geometry = nullptr;
    switch (type) {
    case kBox:
        geometry = std::make_shared<BoxGeometry>();
        break;
    case kSphere:
        geometry = std::make_shared<SphereGeometry>();
        break;
    case kPlane:
        geometry = std::make_shared<PlaneGeometry>();
        break;
    default:
        break;
    }
    if (geometry) geometry->loadFromJson(json);

    return geometry;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
PhysicsGeometry::PhysicsGeometry(GeometryType type):
    Object(),
    m_type(type)
{
    //if (PhysicsManager::geometry().count(name)) {
    //    throw("Error, physics geometry with this name already exists");
    //}
    //PhysicsManager::geometry().emplace(name, this);
}
//////////////////////////////////////////////////////////////////////////////////////////////////
PhysicsGeometry::~PhysicsGeometry()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue PhysicsGeometry::asJson() const
{
    QJsonObject object;
    object.insert("type", int(m_type));
    return object;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
void PhysicsGeometry::loadFromJson(const QJsonValue & json)
{
    QJsonObject object = json.toObject();
    m_type = GeometryType(object.value("type").toInt());
}



//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
// Box Geometry
//////////////////////////////////////////////////////////////////////////////////////////////////
BoxGeometry::BoxGeometry(const Vector3f & extents):
    PhysicsGeometry(kBox),
    m_box(extents.x(), extents.y(), extents.z())
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
BoxGeometry::BoxGeometry(float hx, float hy, float hz):
    PhysicsGeometry(kBox),
    m_box(hx, hy, hz)
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
BoxGeometry::~BoxGeometry()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
Vector3 BoxGeometry::halfExtents() const
{
    return PhysicsManager::toVec3(m_box.halfExtents);
}
//////////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue BoxGeometry::asJson() const
{
    QJsonObject object = PhysicsGeometry::asJson().toObject();
    object.insert("hx", hx());
    object.insert("hy", hy());
    object.insert("hz", hz());

    return object;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
void BoxGeometry::loadFromJson(const QJsonValue & json)
{
    PhysicsGeometry::loadFromJson(json);
    QJsonObject object = json.toObject();
    float hx = object.value("hx").toDouble();
    float hy = object.value("hy").toDouble();
    float hz = object.value("hz").toDouble();
    m_box = physx::PxBoxGeometry(hx, hy, hz);
}



//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
// Sphere Geometry
//////////////////////////////////////////////////////////////////////////////////////////////////
SphereGeometry::SphereGeometry(): 
    PhysicsGeometry(kSphere)
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
SphereGeometry::SphereGeometry(float radius):
    PhysicsGeometry(kSphere),
    m_sphere(radius)
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
SphereGeometry::~SphereGeometry()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue SphereGeometry::asJson() const
{
    QJsonObject object = PhysicsGeometry::asJson().toObject();
    object.insert("radius", m_sphere.radius);

    return object;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
void SphereGeometry::loadFromJson(const QJsonValue & json)
{
    PhysicsGeometry::loadFromJson(json);
    QJsonObject object = json.toObject();
    m_sphere = physx::PxSphereGeometry(object.value("radius").toDouble());
}



//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
// Plane Geometry
//////////////////////////////////////////////////////////////////////////////////////////////////
PlaneGeometry::PlaneGeometry(): 
    PhysicsGeometry(kPlane),
    m_plane(physx::PxPlaneGeometry())
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
PlaneGeometry::~PlaneGeometry()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue PlaneGeometry::asJson() const
{
    QJsonObject object = PhysicsGeometry::asJson().toObject();
    return object;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
void PlaneGeometry::loadFromJson(const QJsonValue & json)
{
    PhysicsGeometry::loadFromJson(json);
}



//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
}