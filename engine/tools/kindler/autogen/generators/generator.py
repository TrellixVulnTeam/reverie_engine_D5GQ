# -*- coding: utf-8 -*-
"""File containing generator class"""

import os
from abc import ABCMeta
from abc import abstractmethod
from jinja2 import Environment, Template
import yaml

class Generator:
    """Base class for auto-generating files"""

    # File path of templates
    _generator_templates_path = f"{os.path.dirname(os.path.abspath(__file__))}/templates"

    def __init__(self, name):
        """
        Parameters
        ----------
        name : str
            The name of the generator

        Returns
        -------
        """

        self.name = name

    def update_schema_version(self):
        """Return whether or not to update schema version"""
        return [False, False, False] # major, minor, patch

    @staticmethod
    def read_yaml_file(file_path: str):
        """Obtain all docs from a YAML file"""
        my_docs = []
        with open(file_path, "r") as yaml_stream:
            try:
                docs = yaml.safe_load_all(yaml_stream)
                for my_doc in docs:
                    my_docs.append(my_doc)
            except Exception as e:
                raise e
        return my_docs

    def render(self, template_path: str, out_file_name: str, **kwargs):
        """Render a Jinja template with a given output filename to the file

        Parameters
        ----------
        template_path: str
            The path of the template, relative to the templates directory
        out_file_name: str
            The name of the output file, or path relative to autogenerated code
            output directory
        """
        # Create render
        input_template_path = f"{self._generator_templates_path}/{template_path}"
        input_template_path = input_template_path.replace(os.sep, '/')
        out_render = self.template_env.get_template(template_path).render(
            template_file_name = input_template_path, # Always want this available
            **kwargs
            )

        # Add path of generated file to output paths
        out_file_path = os.path.abspath(f"{self.generated_code_path}/{out_file_name}")
        out_file_path = out_file_path.replace(os.sep, '/')
        self.generated_paths.append(out_file_path)

        # Write to file
        out_dir = os.path.dirname(out_file_path)
        os.makedirs(out_dir, exist_ok=True)
        with open(out_file_path, "w+") as message_header:
            message_header.write(out_render)
        return out_render

    @abstractmethod
    def initialize(self, generated_code_path: str, data_path: str, template_env: Environment):
        """
        Initialize the generator with paths and any other metadata

        Parameters
        ----------
        generated_code_path: str
            The path at which to output all files
        data_path: str
            The path in which generator data lives
        template_env: Environment
            The Jinja2 template environment used to obtain and render templates
        Returns
        -------
        list
            A list of strings containing the absolute paths of all generated files
        """
        self.generated_code_path = generated_code_path
        self.data_path = data_path
        self.template_env = template_env
        self.generated_paths = []

    @abstractmethod
    def generate(self):
        """
        Generates files for this generator

        Parameters
        ----------
        generated_code_path: str
            The path at which to output all files
        data_path: str
            The path in which generator data lives
        Returns
        -------
        list
            A list of strings containing the absolute paths of all generated files
        """
        
        # Clear any paths from previous generate calls
        self.generated_paths = []
        print(f"Auto-generating files for {type(self).__name__} {self.name}")
        return []
    