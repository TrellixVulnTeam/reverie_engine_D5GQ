///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GbUUID.h"

// Standard Includes

// External

// Project

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Gb {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Implementations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString Uuid::UniqueName(const QString& prefix)
{
    return prefix + UniqueName();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString Uuid::UniqueName()
{
    return Uuid(true).createUniqueName();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Uuid::Uuid(const QUuid & uuid):
    QUuid(uuid)
{
#ifdef DEBUG_MODE
    if (*this != uuid) {
        throw("Error, failed to copy UUID");
    }
#endif
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Uuid::Uuid(const QString & str) :
    QUuid(str)
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Uuid::Uuid(bool generate):
    QUuid()
{
    if (generate) {
        *this = std::move(QUuid::createUuid());
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Uuid::~Uuid()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Uuid& Uuid::operator=(const QUuid & uuid)
{
    if (&uuid == this) return *this;

    QUuid::operator=(uuid);

#ifdef DEBUG_MODE
    if (*this != uuid) {
        throw("Error, failed to match UUID");
    }
#endif

    return *this;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString Uuid::asString() const
{
    return QUuid::toString(QUuid::StringFormat::WithoutBraces);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString Uuid::createUniqueName(const QString & prefix) const
{
    return prefix + asString().replace("-", "_");
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//const QString & Uuid::toString()
//{
//    if (m_string.isNull()) {
//        m_string = QUuid::toString();
//    }
//    return m_string;
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // end namespacing
