///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GTestParallelization.h"


namespace rev{
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tests
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

QMutex ParallelizationTest::m_mutex;
//std::vector<float> ParallelizationTest::m_vector;

ParallelizationTest::ParallelizationTest() : 
    m_pool(2)
{
}

void ParallelizationTest::perform()
{
    // Test parallel loop
    std::vector<float> tempVec(100);

    ParallelLoopGenerator loop(&m_pool, true);
    //ParallelLoopGenerator loop(nullptr, true);
    loop.parallelFor(90,
        [&](int start, int end) {

        //QMutexLocker locker(&m_mutex);
        for (int i = start; i < end; ++i) {

            tempVec[i] = float(i);
        }


    });
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End namespaces
}
