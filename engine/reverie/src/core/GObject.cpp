///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GObject.h"

// Standard Includes
#include <sstream>

#include "GCoreEngine.h"
#include "events/GLogEvent.h"

// External
#ifdef QT_CORE_LIB
#include <QString>
#include <QDebug>
#include <QApplication>
#include <QThread>
#endif
// Project

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace rev {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Implementations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Object
//---------------------------------------------------------------------------------------------------------------------
// Logging Methods
//---------------------------------------------------------------------------------------------------------------------
const char* Object::GetThreadID()
{
    if (IsMainThread()) {
        return "Main";
    }
    else {
        return "Auxillary";
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////
bool Object::IsMainThread()
{
    return QApplication::instance()->thread() == QThread::currentThread();
}
/////////////////////////////////////////////////////////////////////////////////////////////
//Object::Object(const Uuid & uuid):
//    Identifiable(uuid)
//{
//}
/////////////////////////////////////////////////////////////////////////////////////////////
Object::Object()
{
}
/////////////////////////////////////////////////////////////////////////////////////////////
//Object::Object(const GString & name, NameMode mode) :
//    Identifiable(),
//    Nameable(name, mode)
//{
//}
/////////////////////////////////////////////////////////////////////////////////////////////
void Object::logThreadMessage(CoreEngine* core, const char* message, LogLevel logLevel)
{
    const char* threadID;
    if (IsMainThread()) {
        threadID = "Main";
    }
    else {
        threadID = "Auxillary";
    }

#ifdef QT_CORE_LIB
    QApplication::postEvent(core, new LogEvent(namespaceName(), message, GetThreadID(), logLevel));
#endif
}
/////////////////////////////////////////////////////////////////////////////////////////////
void Object::logMessage(LogLevel level, const char* category, const char* message) const
{
	auto& lg = rev::Logger::getInstance();
	lg.logMessage(level, category, message);
}
/////////////////////////////////////////////////////////////////////////////////////////////
std::string Object::toStdString(bool include_type) const
{
    std::stringstream ss;
    if (include_type) ss << className() << "(";
    ss << "0x";
    ss.width(8);
    ss.fill('0');
    ss << std::hex << (long)this;
    if (include_type) ss << ")";
    return ss.str();
}
/////////////////////////////////////////////////////////////////////////////////////////////
QString Object::asQString(bool include_type) const
{
    return QString::fromStdString(toStdString(include_type));
}


/////////////////////////////////////////////////////////////////////////////////////////////
// Operators
/////////////////////////////////////////////////////////////////////////////////////////////
QDebug operator<<(QDebug qdebug, const Object& visobject)
{
    return qdebug << visobject.toStdString(true).c_str();
}
/////////////////////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& os, const Object& visobject)
{
    os << visobject.toStdString(true);
    return os;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // end namespacing
