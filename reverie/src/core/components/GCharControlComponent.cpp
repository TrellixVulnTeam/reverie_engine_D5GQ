///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GCharControlComponent.h"

// Standard Includes

// External

// Project
#include "GTransformComponent.h"
#include "../scene/GSceneObject.h"
#include "../scene/GScene.h"

#include "../geometry/GTransform.h"
#include "../GCoreEngine.h"
#include "../physics/GPhysicsActor.h"
#include "../physics/GPhysicsShape.h"
#include "../physics/GPhysicsMaterial.h"
#include "../physics/GPhysicsGeometry.h"
#include "../physics/GPhysicsManager.h"
#include "../physics/GPhysicsScene.h"
#include "../physics/GCharacterController.h"

#include "../readers/GJsonReader.h"
#include "../../view/components/GComponentWidgets.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace Definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace rev {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CharControlComponent
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CharControlComponent::CharControlComponent() :
    Component(ComponentType::kCharacterController)
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CharControlComponent::CharControlComponent(const std::shared_ptr<SceneObject>& object) :
    Component(object, ComponentType::kCharacterController)
{
    if (!object->scene()->physics()) {
        object->scene()->addPhysics();
    }

    object->addComponent(this);

    /// Create a basic capsule controller
    auto desc = std::make_shared<CapsuleControllerDescription>();
    desc->m_material = PhysicsManager::DefaultMaterial();
    desc->m_radius = 1.0;
    desc->m_height = 1.0;
    m_controller = cctManager()->CreateController(desc, sceneObject());
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CharControlComponent::~CharControlComponent()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CharControlComponent::move(const Vector3 & disp)
{
    m_controller->move(disp);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CharControlComponent::setGravity(const Vector3& gravity)
{
    m_controller->setGravity(gravity);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CharControlComponent::enable()
{
    Component::enable();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CharControlComponent::disable()
{
    Component::disable();
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QJsonValue CharControlComponent::asJson(const SerializationContext& context) const
{
    QJsonObject object = Component::asJson(context).toObject();
    if (m_controller) {
        object.insert("controller", m_controller->asJson());
    }

    return object;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CharControlComponent::loadFromJson(const QJsonValue& json, const SerializationContext& context)
{
    Q_UNUSED(context)

    const QJsonObject& object = json.toObject();

    if (m_controller) {
        // Remove old controller from controller manager
        cctManager()->removeController(*m_controller);
    }

    // Load character controller from JSON
    if (object.contains("controller")) {
        m_controller = cctManager()->CreateController(object.value("controller"));
    }

    Component::loadFromJson(json);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const std::shared_ptr<CCTManager>& CharControlComponent::cctManager() const
{
    return sceneObject()->scene()->physics()->cctManager();
}





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // end namespacing